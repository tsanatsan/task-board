#!/bin/bash

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# ü§ñ –ê–î–ê–ú - –ü–µ—Ä–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π Git —Å–∫—Ä–∏–ø—Ç
# –ü—Ä–æ—Å—Ç–æ–π, –Ω–∞–¥–µ–∂–Ω—ã–π, —Å –ø–æ–ª–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
# –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –í–ï–†–°–ò–Ø - —Ç–æ–ª—å–∫–æ —Ä—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

# –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
set -e  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
set -u  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
safe_check() {
    local current_path="$(pwd)"
    
    # –ó–∞–ø—Ä–µ—â–∞–µ–º —Ä–∞–±–æ—Ç—É –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö
    case "$current_path" in
        "/"|"$HOME"|"$HOME/Desktop"|"$HOME/Documents"|"$HOME/Downloads"|"$HOME/Music"|"$HOME/Pictures"|"$HOME/Videos"|"$HOME/Movies"|"$HOME/Public"|"$HOME/Library"|"$HOME/.Trash"|"$HOME/.ssh"|"$HOME/.config"|"$HOME/Applications"|"$HOME/bin"|"$HOME/usr"|"$HOME/usr"*|"/usr"*|"/bin"*|"/sbin"*|"/etc"*|"/var"*|"/tmp"*|"/System"*|"/Library"*|"/Applications"*|"/Volumes"*)
            echo "‚ùå –û–®–ò–ë–ö–ê: –ê–¥–∞–º –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–ª–∏ –≤–∞–∂–Ω–æ–π –ø–∞–ø–∫–µ!"
            echo "   –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: $current_path"
            echo "   –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ê–¥–∞–º–∞ —Ç–æ–ª—å–∫–æ –≤ –ø–∞–ø–∫–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞!"
            exit 1
            ;;
    esac
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –ø–∞–ø–∫–∏
    local is_project_folder=false
    
    # –ü—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: –Ω–∞–ª–∏—á–∏–µ Git, package.json, README, src/, .gitignore –∏ —Ç.–¥.
    if [ -d ".git" ] || [ -f "package.json" ] || [ -f "README.md" ] || [ -f "README.txt" ] || [ -d "src" ] || [ -f ".gitignore" ] || [ -f "Cargo.toml" ] || [ -f "pom.xml" ] || [ -f "requirements.txt" ] || [ -f "Gemfile" ] || [ -f "go.mod" ] || [ -f "composer.json" ] || [ -f "yarn.lock" ] || [ -f "package-lock.json" ]; then
        is_project_folder=true
    fi
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–¥–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è
    local project_name=$(basename "$current_path")
    echo "üìç –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: $project_name"
    
    if [ "$is_project_folder" = true ]; then
        echo "‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ - –∑–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–µ–Ω"
        return 0
    fi
    
    # –ï—Å–ª–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞, –Ω–æ —ç—Ç–æ –ø–æ–¥–ø–∞–ø–∫–∞ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö
    case "$current_path" in
        "$HOME/Desktop/"*|"$HOME/Documents/"*|"$HOME/Projects/"*|"$HOME/Code/"*|"$HOME/Dev/"*|"$HOME/GitHub/"*|"$HOME/git/"*)
            echo "‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞, –Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            echo "‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –ø–∞–ø–∫–µ '$project_name'?"
            read -p "   –í–≤–µ–¥–∏—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: " confirmation
            
            case "$confirmation" in
                [–î–¥]|[–î–∞]|–¥–∞|–î–∞|–î–ê|[Yy]|[Yy][Ee][Ss]|yes|Yes|YES)
                    echo "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
                    return 0
                    ;;
                *)
                    echo "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
                    exit 1
                    ;;
            esac
            ;;
        *)
            echo "‚ùå –û–®–ò–ë–ö–ê: –ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞!"
            echo "   –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ê–¥–∞–º–∞ –≤ –ø–∞–ø–∫–µ —Å –ø—Ä–æ–µ–∫—Ç–æ–º (–≥–¥–µ –µ—Å—Ç—å .git, package.json, src/ –∏ —Ç.–¥.)"
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –°–†–ê–ó–£
safe_check

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
GRAY='\033[0;37m'
NC='\033[0m' # –ë–µ–∑ —Ü–≤–µ—Ç–∞

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# –§–£–ù–ö–¶–ò–ò –í–ò–ó–£–ê–õ–¨–ù–û–ì–û –û–§–û–†–ú–õ–ï–ù–ò–Ø
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

# –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
show_header() {
    clear
    echo -e "${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${PURPLE}‚ïë${WHITE}                            ü§ñ –ê–î–ê–ú - Git –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è                      ${PURPLE}‚ïë${NC}"
    echo -e "${PURPLE}‚ïë${GRAY}                       –ü–µ—Ä–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤                      ${PURPLE}‚ïë${NC}"
    echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
show_progress() {
    local message="$1"
    local duration="$2"
    echo -e "${CYAN}‚è≥ $message${NC}"
    
    local bar_length=50
    local sleep_time=$(echo "scale=3; $duration / $bar_length" | bc -l 2>/dev/null || echo "0.02")
    
    echo -n "   ["
    for ((i=0; i<bar_length; i++)); do
        echo -n "‚îÅ"
        sleep "$sleep_time"
    done
    echo -e "] ${GREEN}‚úÖ –ì–æ—Ç–æ–≤–æ!${NC}"
    echo ""
}

# –ü–æ—à–∞–≥–æ–≤–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
show_step() {
    local step_num="$1"
    local step_name="$2"
    local status="$3"  # start, success, error, warning
    
    case $status in
        "start")
            echo -e "${BLUE}‚îå‚îÄ –®–∞–≥ $step_num: $step_name${NC}"
            echo -e "${BLUE}‚îÇ${NC}  üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è..."
            ;;
        "success")
            echo -e "${BLUE}‚îî‚îÄ${NC} ${GREEN}‚úÖ –®–∞–≥ $step_num –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!${NC}"
            echo ""
            ;;
        "error")
            echo -e "${BLUE}‚îî‚îÄ${NC} ${RED}‚ùå –û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ $step_num!${NC}"
            echo ""
            ;;
        "warning")
            echo -e "${BLUE}‚îî‚îÄ${NC} ${YELLOW}‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ —à–∞–≥–µ $step_num${NC}"
            echo ""
            ;;
    esac
}

# –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
show_process_details() {
    local title="$1"
    local details="$2"
    echo -e "${CYAN}üìã $title:${NC}"
    echo -e "${GRAY}   $details${NC}"
    echo ""
}

# –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ä–∞–∑–¥–µ–ª–æ–≤
show_section_separator() {
    echo -e "${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
}

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
ask_confirmation() {
    local question="$1"
    local default="$2"  # y –∏–ª–∏ n
    
    if [ "$default" = "y" ]; then
        echo -e "${YELLOW}‚ùì $question [Y/n]:${NC}"
    else
        echo -e "${YELLOW}‚ùì $question [y/N]:${NC}"
    fi
    
    read -p "   üëâ " answer
    case $answer in
        [Yy]|[–î–¥]|[–î–∞]|–¥–∞|–î–∞|–î–ê) return 0 ;;
        [Nn]|[–ù–Ω]|[–ù–µ—Ç]|–Ω–µ—Ç|–ù–µ—Ç|–ù–ï–¢) return 1 ;;
        "") 
            if [ "$default" = "y" ]; then
                return 0
            else
                return 1
            fi
            ;;
        *) return 1 ;;
    esac
}

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò GIT
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å —É—Å–∏–ª–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
check_git_repository() {
    show_step 1 "–ü—Ä–æ–≤–µ—Ä–∫–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è" "start"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –≥–¥–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è
    local current_path="$(pwd)"
    local project_name="$(basename "$current_path")"
    echo -e "${CYAN}üìÅ –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: $project_name${NC}"
    echo -e "${GRAY}üìÇ –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: $current_path${NC}"
    echo ""
    
    if ! git status &>/dev/null; then
        show_step 1 "Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω" "error"
        
        echo -e "${RED}‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Git –≤ –ø–∞–ø–∫–µ: $project_name${NC}"
        echo -e "${YELLOW}–≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—ã–π Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ.${NC}"
        
        if ask_confirmation "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ –ø–∞–ø–∫–µ '$project_name'?" "n"; then
            git init
            show_progress "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è" 1
            show_step 1 "Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω" "success"
        else
            echo -e "${RED}‚ùå –ê–¥–∞–º —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö${NC}"
            echo -e "${BLUE}üìù –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–ø–∫—É —Å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º${NC}"
            exit 1
        fi
    else
        show_step 1 "Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω" "success"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        local current_branch=$(git branch --show-current 2>/dev/null || echo "main")
        local repo_info=$(git remote get-url origin 2>/dev/null || echo "–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        echo -e "${CYAN}üå≥ –í–µ—Ç–∫–∞: $current_branch${NC}"
        echo -e "${CYAN}üíª –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $repo_info${NC}"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞–π–ª–æ–≤
check_file_status() {
    show_step 2 "–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ" "start"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
    local project_name=$(basename "$(pwd)")
    local current_branch=$(git branch --show-current 2>/dev/null || echo "main")
    
    show_process_details "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ" "–ü–∞–ø–∫–∞: $project_name | –í–µ—Ç–∫–∞: $current_branch"
    
    echo -e "${CYAN}üìä –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤:${NC}"
    git status --porcelain | while IFS= read -r line; do
        local status="${line:0:2}"
        local file="${line:3}"
        
        case $status in
            "M "|" M") echo -e "   ${YELLOW}üìù –ò–∑–º–µ–Ω–µ–Ω:${NC} $file" ;;
            "A "|" A") echo -e "   ${GREEN}‚ûï –î–æ–±–∞–≤–ª–µ–Ω:${NC} $file" ;;
            "D "|" D") echo -e "   ${RED}‚ûñ –£–¥–∞–ª–µ–Ω:${NC} $file" ;;
            "??") echo -e "   ${BLUE}‚ùì –ù–æ–≤—ã–π —Ñ–∞–π–ª:${NC} $file" ;;
            "R ") echo -e "   ${PURPLE}üîÑ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω:${NC} $file" ;;
            *) echo -e "   ${GRAY}üìÑ $status${NC} $file" ;;
        esac
    done
    
    local files_count=$(git status --porcelain | wc -l | tr -d ' ')
    
    if [ "$files_count" -eq 0 ]; then
        show_step 2 "–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" "warning"
        echo -e "${YELLOW}‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–º–º–∏—Ç–∞${NC}"
        echo ""
        show_last_commits
        return 1
    else
        show_step 2 "–ù–∞–π–¥–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: $files_count" "success"
        return 0
    fi
}

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ staging —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
add_files_to_staging() {
    show_step 3 "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ staging area" "start"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    local is_known_project=false
    if [ -d ".git" ] || [ -f "package.json" ] || [ -d "src" ] || [ -f ".gitignore" ]; then
        is_known_project=true
    fi
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã
    if [ "$is_known_project" = true ]; then
        echo -e "${CYAN}üì¶ –î–æ–±–∞–≤–ª—è—é –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ...${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ë—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –í–°–ï –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ!${NC}"
        
        if ! ask_confirmation "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤?" "n"; then
            echo -e "${YELLOW}‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º${NC}"
            return 1
        fi
    fi
    
    show_progress "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π" 1.5
    
    git add . 2>/dev/null
    
    if [ $? -eq 0 ]; then
        local staged_count=$(git diff --cached --numstat | wc -l | tr -d ' ')
        show_step 3 "–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ staging: $staged_count" "success"
        
        echo -e "${CYAN}üì¶ –§–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –∫ –∫–æ–º–º–∏—Ç—É:${NC}"
        git diff --cached --name-status | while IFS= read -r line; do
            local status="${line:0:1}"
            local file="${line:2}"
            case $status in
                "M") echo -e "   ${YELLOW}üìù $file${NC}" ;;
                "A") echo -e "   ${GREEN}‚ûï $file${NC}" ;;
                "D") echo -e "   ${RED}‚ûñ $file${NC}" ;;
                *) echo -e "   ${GRAY}üìÑ $file${NC}" ;;
            esac
        done
        echo ""
        return 0
    else
        show_step 3 "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤" "error"
        return 1
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
create_commit() {
    show_step 4 "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞" "start"
    
    echo -e "${CYAN}üí¨ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞:${NC}"
    echo -e "${GRAY}   (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)${NC}"
    read -p "   üëâ " commit_message
    
    if [ -z "$commit_message" ]; then
        local current_date=$(date "+%d.%m.%Y %H:%M")
        commit_message="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: $current_date"
        show_process_details "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" "$commit_message"
    else
        show_process_details "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" "$commit_message"
    fi
    
    show_progress "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞" 2
    
    git commit -m "$commit_message" >/dev/null 2>&1
    
    if [ $? -eq 0 ]; then
        show_step 4 "–ö–æ–º–º–∏—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω" "success"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∫–æ–º–º–∏—Ç–µ
        local commit_hash=$(git rev-parse --short HEAD)
        local commit_time=$(git log -1 --format="%cd" --date=format:"%H:%M:%S")
        
        echo -e "${GREEN}üéâ –ö–û–ú–ú–ò–¢ –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û!${NC}"
        echo -e "${CYAN}üìù –•–µ—à –∫–æ–º–º–∏—Ç–∞:${NC} $commit_hash"
        echo -e "${CYAN}‚è∞ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:${NC} $commit_time"
        echo -e "${CYAN}üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:${NC} $commit_message"
        echo ""
        
        return 0
    else
        show_step 4 "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞" "error"
        return 1
    fi
}

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–º–∏—Ç–∞
show_commit_stats() {
    show_step 5 "–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π" "start"
    
    show_progress "–ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏" 1
    
    echo -e "${CYAN}üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–º–∏—Ç–∞:${NC}"
    git diff --stat HEAD~1 | while IFS= read -r line; do
        echo -e "   ${GRAY}$line${NC}"
    done
    echo ""
    
    show_step 5 "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω" "success"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ remote –∏ push
handle_remote_push() {
    show_step 6 "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è" "start"
    
    if git remote | grep -q origin; then
        local remote_url=$(git remote get-url origin 2>/dev/null)
        show_process_details "–ù–∞–π–¥–µ–Ω remote" "$remote_url"
        show_step 6 "Remote —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω" "success"
        
        if ask_confirmation "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä (git push)?" "y"; then
            show_step 7 "–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä" "start"
            show_progress "–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä" 3
            
            git push 2>/dev/null
            
            if [ $? -eq 0 ]; then
                show_step 7 "–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä" "success"
                echo -e "${GREEN}üöÄ –í–°–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –°–û–•–†–ê–ù–ï–ù–´ –ò –û–¢–ü–†–ê–í–õ–ï–ù–´!${NC}"
            else
                show_step 7 "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä" "error"
                echo -e "${YELLOW}‚ö†Ô∏è –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä${NC}"
            fi
        else
            echo -e "${BLUE}üìù –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ${NC}"
        fi
    else
        show_step 6 "Remote —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω" "warning"
        echo -e "${YELLOW}‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        echo -e "${GRAY}   –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ${NC}"
    fi
    echo ""
}

# –ü–æ–∫–∞–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º–∏—Ç–æ–≤
show_last_commits() {
    echo -e "${CYAN}üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫–æ–º–º–∏—Ç–æ–≤:${NC}"
    git log --oneline --color=always -5 | while IFS= read -r line; do
        echo -e "   ${GRAY}$line${NC}"
    done
    echo ""
}

# –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ
show_final_summary() {
    show_section_separator
    echo -e "${GREEN}üéØ –ê–î–ê–ú –ó–ê–í–ï–†–®–ò–õ –†–ê–ë–û–¢–£ –£–°–ü–ï–®–ù–û!${NC}"
    echo ""
    echo -e "${CYAN}üìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:${NC}"
    echo -e "   ${GREEN}‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π${NC}"
    echo -e "   ${GREEN}‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è${NC}"
    echo -e "   ${GREEN}‚úÖ –§–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ staging${NC}"
    echo -e "   ${GREEN}‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–º–º–∏—Ç${NC}"
    echo -e "   ${GREEN}‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞${NC}"
    echo -e "   ${GREEN}‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω remote push${NC}"
    echo ""
    
    local project_name=$(basename "$(pwd)")
    echo -e "${PURPLE}ü§ñ –ê–¥–∞–º —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: ${WHITE}$project_name${NC}"
    show_section_separator
}

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

main() {
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    show_header
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —à–∞–≥–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
    check_git_repository
    
    if check_file_status; then
        add_files_to_staging
        if [ $? -eq 0 ]; then
            create_commit
            if [ $? -eq 0 ]; then
                show_commit_stats
                handle_remote_push
                show_final_summary
            fi
        fi
    fi
    
    # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
    echo ""
    echo -e "${GRAY}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...${NC}"
    read
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap 'echo -e "\n${RED}‚ùå –ê–¥–∞–º –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º${NC}"; exit 1' INT TERM

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@"